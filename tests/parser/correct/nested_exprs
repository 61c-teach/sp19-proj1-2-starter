//Test that expressions that can be repeated internally are

struct list {
  int i;
  struct list *next;
};

int main () {
  struct list *list;
  int a = 1 + 2 + 3 + 4;
  int *p1 = &a;
  int **p2 = &p1;
  int ***p3 = &p2;
  int ****p4 = &p3;
  int b = 1 -2 -3 -4;
  int c = 1 * 2 * 3 * 4;
  int d = 1 / 2 / 3 / 4;
  int e = 1 == 2 == 3 == 4;
  int f = e = d = c = b = a;
  int g = 1 != 2 != 3 != 4;
  int h = 1 >= 2 >= 3 >= 4;
  int i = 1 > 2 > 3 > 4;
  int j = 1 <= 2 <= 3 <= 4;
  int k = 1 < 2 < 3 < 4;
  int l = 1 && 2 && 3 && 4;
  int m = 1 || 2 || 3 || 4;
  int n = 1 & 2 & 3 & 4;
  int o = 1 | 2 | 3 | 4;
  int p = 1 ^ 2 ^ 3 ^ 4;
  int q = - - - - 1;
  int r = ****p4;
  int s = !!!!!1;
  int t = ~~~~~~1;
  int u = list->next->next->next->next->i;
  struct list item = *list;
  int v = (*(*item.next).next).i;
  int w = (int) (int *) (char *) (char) list;
  return 0;
}

//Tests that expressions can be repeated and linked

int g () {
  struct list *i;
  //binary exprs can be linked
  int a = 1 + 2 - 3 * i++->i;
  return main ();
}
