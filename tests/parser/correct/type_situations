//Check that every type can be used in a struct

struct empty {};

struct item {
  int i;
  char c;
  char *str;
  struct item **children;
  bool hasChildren;
  struct empty e;
};

//Check that a global variable can be declared with every type

int i;

int x, y = 3, *z = NULL;

char p;

char *c = "happy", d='l', **e ;

bool b;

bool const *ptr, f=False, t=true;

struct item iter;

const struct item *s = NULL, ***p;

// Check that every type is a valid return type


struct empty f1 () {
  return NULL;
}

struct empty *f2 () {
  return NULL;
}

int f3 () {
  return NULL;
}

int **f4 () {
  return NULL;
}

char f5 () {
  return NULL;
}

char **** f6 () {
  return NULL;
}

bool f7 () {
  return NULL;
}

bool ********************************************** f8 () {
  return NULL;
}

// Check that every type can be an argument

int f9 (struct empty a, struct item **b, int c, int ***d, char e, char *f, bool g, bool ****h) {
  return 22;
}

// Check that every type can be declared inside a function

int f10 () {
  int i;

  int x, y = 3, *z = NULL;

  char p;

  char *c = "happy", d='l', **e ;

  bool b;

  bool const *ptr, f=False, t=true;

  struct item iter;

  const struct item *s = NULL, ***p;

  return -1;
}
